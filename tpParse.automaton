State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On CLASS shift to state 1
-- On prog shift to state 156
-- On list(declBegin) shift to state 157
-- On declBegin shift to state 160
-- On classe shift to state 162
## Reductions:
-- On LBRACK
--   reduce production list(declBegin) ->

State 1:
## Known stack suffix:
## CLASS
## LR(1) items:
classe -> CLASS . TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS blocDecl [ LBRACK CLASS ]
classe -> CLASS . TYPE LPAREN paramDecl RPAREN IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On TYPE shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CLASS TYPE
## LR(1) items:
classe -> CLASS TYPE . LPAREN paramDecl RPAREN EXTENDS TYPE IS blocDecl [ LBRACK CLASS ]
classe -> CLASS TYPE . LPAREN paramDecl RPAREN IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On LPAREN shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CLASS TYPE LPAREN
## LR(1) items:
classe -> CLASS TYPE LPAREN . paramDecl RPAREN EXTENDS TYPE IS blocDecl [ LBRACK CLASS ]
classe -> CLASS TYPE LPAREN . paramDecl RPAREN IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 7
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
-- On paramDecl shift to state 14
-- On loption(separated_nonempty_list(COMMA,paramList)) shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) ->

State 4:
## Known stack suffix:
## ID
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID . [ COLON ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ID) -> ID

State 5:
## Known stack suffix:
## ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,ID) shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## ID COMMA separated_nonempty_list(COMMA,ID)
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID)

State 7:
## Known stack suffix:
## separated_nonempty_list(COMMA,paramList)
## LR(1) items:
loption(separated_nonempty_list(COMMA,paramList)) -> separated_nonempty_list(COMMA,paramList) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) -> separated_nonempty_list(COMMA,paramList)

State 8:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
paramList -> separated_nonempty_list(COMMA,ID) . COLON TYPE [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
paramList -> separated_nonempty_list(COMMA,ID) COLON . TYPE [ RPAREN COMMA ]
## Transitions:
-- On TYPE shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON TYPE
## LR(1) items:
paramList -> separated_nonempty_list(COMMA,ID) COLON TYPE . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production paramList -> separated_nonempty_list(COMMA,ID) COLON TYPE

State 11:
## Known stack suffix:
## paramList
## LR(1) items:
separated_nonempty_list(COMMA,paramList) -> paramList . [ RPAREN ]
separated_nonempty_list(COMMA,paramList) -> paramList . COMMA separated_nonempty_list(COMMA,paramList) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,paramList) -> paramList

State 12:
## Known stack suffix:
## paramList COMMA
## LR(1) items:
separated_nonempty_list(COMMA,paramList) -> paramList COMMA . separated_nonempty_list(COMMA,paramList) [ RPAREN ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 13
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
## Reductions:

State 13:
## Known stack suffix:
## paramList COMMA separated_nonempty_list(COMMA,paramList)
## LR(1) items:
separated_nonempty_list(COMMA,paramList) -> paramList COMMA separated_nonempty_list(COMMA,paramList) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,paramList) -> paramList COMMA separated_nonempty_list(COMMA,paramList)

State 14:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl . RPAREN EXTENDS TYPE IS blocDecl [ LBRACK CLASS ]
classe -> CLASS TYPE LPAREN paramDecl . RPAREN IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On RPAREN shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN . EXTENDS TYPE IS blocDecl [ LBRACK CLASS ]
classe -> CLASS TYPE LPAREN paramDecl RPAREN . IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On IS shift to state 16
-- On EXTENDS shift to state 152
## Reductions:

State 16:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN IS
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN IS . blocDecl [ LBRACK CLASS ]
## Transitions:
-- On LBRACK shift to state 17
-- On blocDecl shift to state 151
## Reductions:

State 17:
## Known stack suffix:
## LBRACK
## LR(1) items:
blocDecl -> LBRACK . champ list(declFonction) RBRACK [ LBRACK CLASS ]
## Transitions:
-- On STATIC shift to state 18
-- On ID shift to state 4
-- On AUTO shift to state 28
-- On separated_nonempty_list(COMMA,ID) shift to state 33
-- On champ shift to state 37
## Reductions:

State 18:
## Known stack suffix:
## STATIC
## LR(1) items:
champ -> STATIC . separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON [ RBRACK DEF ]
champ -> STATIC . AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On AUTO shift to state 19
-- On separated_nonempty_list(COMMA,ID) shift to state 24
## Reductions:

State 19:
## Known stack suffix:
## STATIC AUTO
## LR(1) items:
champ -> STATIC AUTO . separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,ID) shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## STATIC AUTO separated_nonempty_list(COMMA,ID)
## LR(1) items:
champ -> STATIC AUTO separated_nonempty_list(COMMA,ID) . COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On COLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## STATIC AUTO separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
champ -> STATIC AUTO separated_nonempty_list(COMMA,ID) COLON . TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## STATIC AUTO separated_nonempty_list(COMMA,ID) COLON TYPE
## LR(1) items:
champ -> STATIC AUTO separated_nonempty_list(COMMA,ID) COLON TYPE . SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On SEMICOLON shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## STATIC AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON
## LR(1) items:
champ -> STATIC AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production champ -> STATIC AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON

State 24:
## Known stack suffix:
## STATIC separated_nonempty_list(COMMA,ID)
## LR(1) items:
champ -> STATIC separated_nonempty_list(COMMA,ID) . COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On COLON shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## STATIC separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
champ -> STATIC separated_nonempty_list(COMMA,ID) COLON . TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## STATIC separated_nonempty_list(COMMA,ID) COLON TYPE
## LR(1) items:
champ -> STATIC separated_nonempty_list(COMMA,ID) COLON TYPE . SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On SEMICOLON shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## STATIC separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON
## LR(1) items:
champ -> STATIC separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production champ -> STATIC separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON

State 28:
## Known stack suffix:
## AUTO
## LR(1) items:
champ -> AUTO . separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,ID) shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## AUTO separated_nonempty_list(COMMA,ID)
## LR(1) items:
champ -> AUTO separated_nonempty_list(COMMA,ID) . COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On COLON shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## AUTO separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
champ -> AUTO separated_nonempty_list(COMMA,ID) COLON . TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## AUTO separated_nonempty_list(COMMA,ID) COLON TYPE
## LR(1) items:
champ -> AUTO separated_nonempty_list(COMMA,ID) COLON TYPE . SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On SEMICOLON shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON
## LR(1) items:
champ -> AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production champ -> AUTO separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON

State 33:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
champ -> separated_nonempty_list(COMMA,ID) . COLON TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On COLON shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON
## LR(1) items:
champ -> separated_nonempty_list(COMMA,ID) COLON . TYPE SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON TYPE
## LR(1) items:
champ -> separated_nonempty_list(COMMA,ID) COLON TYPE . SEMICOLON [ RBRACK DEF ]
## Transitions:
-- On SEMICOLON shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON
## LR(1) items:
champ -> separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production champ -> separated_nonempty_list(COMMA,ID) COLON TYPE SEMICOLON

State 37:
## Known stack suffix:
## LBRACK champ
## LR(1) items:
blocDecl -> LBRACK champ . list(declFonction) RBRACK [ LBRACK CLASS ]
## Transitions:
-- On DEF shift to state 38
-- On list(declFonction) shift to state 147
-- On declFonction shift to state 149
## Reductions:
-- On RBRACK
--   reduce production list(declFonction) ->

State 38:
## Known stack suffix:
## DEF
## LR(1) items:
declFonction -> DEF . STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF . OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF . OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF . ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF . STATIC ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
declFonction -> DEF . OVERRIDE ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
declFonction -> DEF . ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
declFonction -> DEF . OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On STATIC shift to state 39
-- On OVERRIDE shift to state 115
-- On ID shift to state 137
## Reductions:

State 39:
## Known stack suffix:
## DEF STATIC
## LR(1) items:
declFonction -> DEF STATIC . ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF STATIC . ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## DEF STATIC ID
## LR(1) items:
declFonction -> DEF STATIC ID . LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF STATIC ID . LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On LPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## DEF STATIC ID LPAREN
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN . paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF STATIC ID LPAREN . paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 7
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
-- On paramDecl shift to state 42
-- On loption(separated_nonempty_list(COMMA,paramList)) shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) ->

State 42:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl . RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF STATIC ID LPAREN paramDecl . RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On RPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN . COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 44
-- On COLON shift to state 110
## Reductions:

State 44:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN IS
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 109
## Reductions:

State 45:
## Known stack suffix:
## LBRACK
## LR(1) items:
bloc -> LBRACK . list(decl) IS list(instruction) RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
bloc -> LBRACK . list(instruction) RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On LBRACK shift to state 45
-- On IF shift to state 81
-- On ID shift to state 93
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On separated_nonempty_list(COMMA,ID) shift to state 94
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 95
-- On list(instruction) shift to state 99
-- On list(decl) shift to state 101
-- On instruction shift to state 105
-- On expr shift to state 87
-- On decl shift to state 107
-- On bloc shift to state 92
## Reductions:
-- On IS
--   reduce production list(decl) ->
-- On RBRACK
--   reduce production list(instruction) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 46:
## Known stack suffix:
## THIS
## LR(1) items:
expr -> THIS . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> THIS

State 47:
## Known stack suffix:
## SUPER
## LR(1) items:
expr -> SUPER . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> SUPER

State 48:
## Known stack suffix:
## RESULT
## LR(1) items:
expr -> RESULT . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> RESULT

State 49:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 80
## Reductions:

State 50:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> LPAREN . TYPE expr RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On TYPE shift to state 51
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 78
## Reductions:

State 51:
## Known stack suffix:
## LPAREN TYPE
## LR(1) items:
expr -> LPAREN TYPE . expr RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 55
## Reductions:

State 52:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> ID

State 53:
## Known stack suffix:
## CSTE
## LR(1) items:
expr -> CSTE . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> CSTE

State 54:
## Known stack suffix:
## CONST
## LR(1) items:
expr -> CONST . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> CONST

State 55:
## Known stack suffix:
## LPAREN TYPE expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DOT ID [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> LPAREN TYPE expr . RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . MINUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . TIMES expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DIV expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . RELOP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . AMP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On RPAREN shift to state 77
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On AMP shift to state 73
## Reductions:

State 56:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr TIMES expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On DOT shift to state 58
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DIV COMMA ASSIGN AMP
--   reduce production expr -> expr TIMES expr

State 58:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr DOT . ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On ID shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## expr DOT ID
## LR(1) items:
expr -> expr DOT ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr DOT ID . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On LPAREN shift to state 60
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> expr DOT ID

State 60:
## Known stack suffix:
## expr DOT ID LPAREN
## LR(1) items:
expr -> expr DOT ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On separated_nonempty_list(COMMA,expr) shift to state 61
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 62
-- On expr shift to state 64
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 61:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 62:
## Known stack suffix:
## expr DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> expr DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On RPAREN shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## expr DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
expr -> expr DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> expr DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN

State 64:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . DOT ID [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . PLUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . MINUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . TIMES expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . DIV expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . RELOP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
expr -> expr . AMP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV COMMA AMP ]
separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On TIMES shift to state 56
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On COMMA shift to state 75
-- On AMP shift to state 73
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 65:
## Known stack suffix:
## expr RELOP
## LR(1) items:
expr -> expr RELOP . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expr RELOP expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr RELOP expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On AMP shift to state 73
## Reductions:
-- On THEN SEMICOLON RPAREN COMMA ASSIGN
--   reduce production expr -> expr RELOP expr

State 67:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr PLUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On DOT shift to state 58
-- On DIV shift to state 69
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP PLUS MINUS COMMA ASSIGN AMP
--   reduce production expr -> expr PLUS expr

State 69:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr DIV expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On DOT shift to state 58
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DIV COMMA ASSIGN AMP
--   reduce production expr -> expr DIV expr

State 71:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr MINUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On DOT shift to state 58
-- On DIV shift to state 69
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP PLUS MINUS COMMA ASSIGN AMP
--   reduce production expr -> expr MINUS expr

State 73:
## Known stack suffix:
## expr AMP
## LR(1) items:
expr -> expr AMP . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr AMP expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr AMP expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On DOT shift to state 58
-- On DIV shift to state 69
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP PLUS MINUS COMMA ASSIGN AMP
--   reduce production expr -> expr AMP expr

State 75:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On separated_nonempty_list(COMMA,expr) shift to state 76
-- On expr shift to state 64
## Reductions:

State 76:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 77:
## Known stack suffix:
## LPAREN TYPE expr RPAREN
## LR(1) items:
expr -> LPAREN TYPE expr RPAREN . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> LPAREN TYPE expr RPAREN

State 78:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DOT ID [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . PLUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . MINUS expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . TIMES expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DIV expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . RELOP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . AMP expr [ TIMES RPAREN RELOP PLUS MINUS DOT DIV AMP ]
## Transitions:
-- On TIMES shift to state 56
-- On RPAREN shift to state 79
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On AMP shift to state 73
## Reductions:

State 79:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP
--   reduce production expr -> LPAREN expr RPAREN

State 80:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> MINUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DOT DIV COMMA ASSIGN AMP ]
## Transitions:
-- On DOT shift to state 58
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS MINUS DIV COMMA ASSIGN AMP
--   reduce production expr -> MINUS expr

State 81:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expr THEN instruction ELSE instruction [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DOT ID [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . PLUS expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . MINUS expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . TIMES expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DIV expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . RELOP expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . AMP expr [ TIMES THEN RELOP PLUS MINUS DOT DIV AMP ]
instruction -> IF expr . THEN instruction ELSE instruction [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On TIMES shift to state 56
-- On THEN shift to state 83
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On AMP shift to state 73
## Reductions:

State 83:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
instruction -> IF expr THEN . instruction ELSE instruction [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On LBRACK shift to state 45
-- On IF shift to state 81
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On instruction shift to state 84
-- On expr shift to state 87
-- On bloc shift to state 92
## Reductions:

State 84:
## Known stack suffix:
## IF expr THEN instruction
## LR(1) items:
instruction -> IF expr THEN instruction . ELSE instruction [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On ELSE shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## IF expr THEN instruction ELSE
## LR(1) items:
instruction -> IF expr THEN instruction ELSE . instruction [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On LBRACK shift to state 45
-- On IF shift to state 81
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On instruction shift to state 86
-- On expr shift to state 87
-- On bloc shift to state 92
## Reductions:

State 86:
## Known stack suffix:
## IF expr THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expr THEN instruction ELSE instruction . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST
--   reduce production instruction -> IF expr THEN instruction ELSE instruction

State 87:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . DOT ID [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . PLUS expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . RELOP expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
expr -> expr . AMP expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
instruction -> expr . SEMICOLON [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
instruction -> expr . ASSIGN expr SEMICOLON [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On TIMES shift to state 56
-- On SEMICOLON shift to state 88
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On ASSIGN shift to state 89
-- On AMP shift to state 73
## Reductions:

State 88:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
instruction -> expr SEMICOLON . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST
--   reduce production instruction -> expr SEMICOLON

State 89:
## Known stack suffix:
## expr ASSIGN
## LR(1) items:
instruction -> expr ASSIGN . expr SEMICOLON [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On expr shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## expr ASSIGN expr
## LR(1) items:
expr -> expr . DOT ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DOT ID [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . PLUS expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . MINUS expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . TIMES expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . DIV expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . RELOP expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
expr -> expr . AMP expr [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV AMP ]
instruction -> expr ASSIGN expr . SEMICOLON [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
-- On TIMES shift to state 56
-- On SEMICOLON shift to state 91
-- On RELOP shift to state 65
-- On PLUS shift to state 67
-- On MINUS shift to state 71
-- On DOT shift to state 58
-- On DIV shift to state 69
-- On AMP shift to state 73
## Reductions:

State 91:
## Known stack suffix:
## expr ASSIGN expr SEMICOLON
## LR(1) items:
instruction -> expr ASSIGN expr SEMICOLON . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST
--   reduce production instruction -> expr ASSIGN expr SEMICOLON

State 92:
## Known stack suffix:
## bloc
## LR(1) items:
instruction -> bloc . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID ELSE CSTE CONST
--   reduce production instruction -> bloc

State 93:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP ]
separated_nonempty_list(COMMA,ID) -> ID . [ COLON ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:
-- On TIMES SEMICOLON RELOP PLUS MINUS DOT DIV ASSIGN AMP
--   reduce production expr -> ID
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ID) -> ID

State 94:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID)

State 95:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,ID))
## LR(1) items:
decl -> loption(separated_nonempty_list(COMMA,ID)) . COLON TYPE SEMICOLON [ IS ID COLON ]
## Transitions:
-- On COLON shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,ID)) COLON
## LR(1) items:
decl -> loption(separated_nonempty_list(COMMA,ID)) COLON . TYPE SEMICOLON [ IS ID COLON ]
## Transitions:
-- On TYPE shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,ID)) COLON TYPE
## LR(1) items:
decl -> loption(separated_nonempty_list(COMMA,ID)) COLON TYPE . SEMICOLON [ IS ID COLON ]
## Transitions:
-- On SEMICOLON shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,ID)) COLON TYPE SEMICOLON
## LR(1) items:
decl -> loption(separated_nonempty_list(COMMA,ID)) COLON TYPE SEMICOLON . [ IS ID COLON ]
## Transitions:
## Reductions:
-- On IS ID COLON
--   reduce production decl -> loption(separated_nonempty_list(COMMA,ID)) COLON TYPE SEMICOLON

State 99:
## Known stack suffix:
## LBRACK list(instruction)
## LR(1) items:
bloc -> LBRACK list(instruction) . RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
-- On RBRACK shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LBRACK list(instruction) RBRACK
## LR(1) items:
bloc -> LBRACK list(instruction) RBRACK . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST
--   reduce production bloc -> LBRACK list(instruction) RBRACK

State 101:
## Known stack suffix:
## LBRACK list(decl)
## LR(1) items:
bloc -> LBRACK list(decl) . IS list(instruction) RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
-- On IS shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## LBRACK list(decl) IS
## LR(1) items:
bloc -> LBRACK list(decl) IS . list(instruction) RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On LBRACK shift to state 45
-- On IF shift to state 81
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On list(instruction) shift to state 103
-- On instruction shift to state 105
-- On expr shift to state 87
-- On bloc shift to state 92
## Reductions:
-- On RBRACK
--   reduce production list(instruction) ->

State 103:
## Known stack suffix:
## LBRACK list(decl) IS list(instruction)
## LR(1) items:
bloc -> LBRACK list(decl) IS list(instruction) . RBRACK [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
-- On RBRACK shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LBRACK list(decl) IS list(instruction) RBRACK
## LR(1) items:
bloc -> LBRACK list(decl) IS list(instruction) RBRACK . [ THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST ]
## Transitions:
## Reductions:
-- On THIS SUPER RESULT RBRACK MINUS LPAREN LBRACK IF ID EOF ELSE DEF CSTE CONST
--   reduce production bloc -> LBRACK list(decl) IS list(instruction) RBRACK

State 105:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RBRACK ]
## Transitions:
-- On THIS shift to state 46
-- On SUPER shift to state 47
-- On RESULT shift to state 48
-- On MINUS shift to state 49
-- On LPAREN shift to state 50
-- On LBRACK shift to state 45
-- On IF shift to state 81
-- On ID shift to state 52
-- On CSTE shift to state 53
-- On CONST shift to state 54
-- On list(instruction) shift to state 106
-- On instruction shift to state 105
-- On expr shift to state 87
-- On bloc shift to state 92
## Reductions:
-- On RBRACK
--   reduce production list(instruction) ->

State 106:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production list(instruction) -> instruction list(instruction)

State 107:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ IS ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,ID) shift to state 94
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 95
-- On list(decl) shift to state 108
-- On decl shift to state 107
## Reductions:
-- On IS
--   reduce production list(decl) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 108:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production list(decl) -> decl list(decl)

State 109:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN IS bloc
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN IS bloc

State 110:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN COLON
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN COLON . TYPE IS bloc [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc
## LR(1) items:
declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc

State 114:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,paramList))
## LR(1) items:
paramDecl -> loption(separated_nonempty_list(COMMA,paramList)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production paramDecl -> loption(separated_nonempty_list(COMMA,paramList))

State 115:
## Known stack suffix:
## DEF OVERRIDE
## LR(1) items:
declFonction -> DEF OVERRIDE . ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE . STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE . ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE . STATIC ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On STATIC shift to state 116
-- On ID shift to state 127
## Reductions:

State 116:
## Known stack suffix:
## DEF OVERRIDE STATIC
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC . ID LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE STATIC . ID LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## DEF OVERRIDE STATIC ID
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID . LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE STATIC ID . LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On LPAREN shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN . paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE STATIC ID LPAREN . paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 7
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
-- On paramDecl shift to state 119
-- On loption(separated_nonempty_list(COMMA,paramList)) shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) ->

State 119:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl . RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl . RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On RPAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN . COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 121
-- On COLON shift to state 123
## Reductions:

State 121:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS bloc
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN IS bloc

State 123:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON . TYPE IS bloc [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc
## LR(1) items:
declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF OVERRIDE STATIC ID LPAREN paramDecl RPAREN COLON TYPE IS bloc

State 127:
## Known stack suffix:
## DEF OVERRIDE ID
## LR(1) items:
declFonction -> DEF OVERRIDE ID . LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE ID . LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On LPAREN shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN . paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE ID LPAREN . paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 7
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
-- On paramDecl shift to state 129
-- On loption(separated_nonempty_list(COMMA,paramList)) shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) ->

State 129:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl . RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE ID LPAREN paramDecl . RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On RPAREN shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN . COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 131
-- On COLON shift to state 133
## Reductions:

State 131:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN IS
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN IS bloc
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN IS bloc

State 133:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON . TYPE IS bloc [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS bloc
## LR(1) items:
declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF OVERRIDE ID LPAREN paramDecl RPAREN COLON TYPE IS bloc

State 137:
## Known stack suffix:
## DEF ID
## LR(1) items:
declFonction -> DEF ID . LPAREN paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF ID . LPAREN paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On LPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## DEF ID LPAREN
## LR(1) items:
declFonction -> DEF ID LPAREN . paramDecl RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF ID LPAREN . paramDecl RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On ID shift to state 4
-- On separated_nonempty_list(COMMA,paramList) shift to state 7
-- On separated_nonempty_list(COMMA,ID) shift to state 8
-- On paramList shift to state 11
-- On paramDecl shift to state 139
-- On loption(separated_nonempty_list(COMMA,paramList)) shift to state 114
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,paramList)) ->

State 139:
## Known stack suffix:
## DEF ID LPAREN paramDecl
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl . RPAREN COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF ID LPAREN paramDecl . RPAREN IS bloc [ RBRACK DEF ]
## Transitions:
-- On RPAREN shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN . COLON TYPE IS bloc [ RBRACK DEF ]
declFonction -> DEF ID LPAREN paramDecl RPAREN . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 141
-- On COLON shift to state 143
## Reductions:

State 141:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN IS
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN IS bloc
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF ID LPAREN paramDecl RPAREN IS bloc

State 143:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN COLON
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN COLON . TYPE IS bloc [ RBRACK DEF ]
## Transitions:
-- On TYPE shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN COLON TYPE
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN COLON TYPE . IS bloc [ RBRACK DEF ]
## Transitions:
-- On IS shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN COLON TYPE IS
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN COLON TYPE IS . bloc [ RBRACK DEF ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## DEF ID LPAREN paramDecl RPAREN COLON TYPE IS bloc
## LR(1) items:
declFonction -> DEF ID LPAREN paramDecl RPAREN COLON TYPE IS bloc . [ RBRACK DEF ]
## Transitions:
## Reductions:
-- On RBRACK DEF
--   reduce production declFonction -> DEF ID LPAREN paramDecl RPAREN COLON TYPE IS bloc

State 147:
## Known stack suffix:
## LBRACK champ list(declFonction)
## LR(1) items:
blocDecl -> LBRACK champ list(declFonction) . RBRACK [ LBRACK CLASS ]
## Transitions:
-- On RBRACK shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## LBRACK champ list(declFonction) RBRACK
## LR(1) items:
blocDecl -> LBRACK champ list(declFonction) RBRACK . [ LBRACK CLASS ]
## Transitions:
## Reductions:
-- On LBRACK CLASS
--   reduce production blocDecl -> LBRACK champ list(declFonction) RBRACK

State 149:
## Known stack suffix:
## declFonction
## LR(1) items:
list(declFonction) -> declFonction . list(declFonction) [ RBRACK ]
## Transitions:
-- On DEF shift to state 38
-- On list(declFonction) shift to state 150
-- On declFonction shift to state 149
## Reductions:
-- On RBRACK
--   reduce production list(declFonction) ->

State 150:
## Known stack suffix:
## declFonction list(declFonction)
## LR(1) items:
list(declFonction) -> declFonction list(declFonction) . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK
--   reduce production list(declFonction) -> declFonction list(declFonction)

State 151:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN IS blocDecl
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN IS blocDecl . [ LBRACK CLASS ]
## Transitions:
## Reductions:
-- On LBRACK CLASS
--   reduce production classe -> CLASS TYPE LPAREN paramDecl RPAREN IS blocDecl

State 152:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN EXTENDS
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN EXTENDS . TYPE IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On TYPE shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE . IS blocDecl [ LBRACK CLASS ]
## Transitions:
-- On IS shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS . blocDecl [ LBRACK CLASS ]
## Transitions:
-- On LBRACK shift to state 17
-- On blocDecl shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS blocDecl
## LR(1) items:
classe -> CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS blocDecl . [ LBRACK CLASS ]
## Transitions:
## Reductions:
-- On LBRACK CLASS
--   reduce production classe -> CLASS TYPE LPAREN paramDecl RPAREN EXTENDS TYPE IS blocDecl

State 156:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 157:
## Known stack suffix:
## list(declBegin)
## LR(1) items:
prog -> list(declBegin) . bloc EOF [ # ]
## Transitions:
-- On LBRACK shift to state 45
-- On bloc shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## list(declBegin) bloc
## LR(1) items:
prog -> list(declBegin) bloc . EOF [ # ]
## Transitions:
-- On EOF shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## list(declBegin) bloc EOF
## LR(1) items:
prog -> list(declBegin) bloc EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(declBegin) bloc EOF

State 160:
## Known stack suffix:
## declBegin
## LR(1) items:
list(declBegin) -> declBegin . list(declBegin) [ LBRACK ]
## Transitions:
-- On CLASS shift to state 1
-- On list(declBegin) shift to state 161
-- On declBegin shift to state 160
-- On classe shift to state 162
## Reductions:
-- On LBRACK
--   reduce production list(declBegin) ->

State 161:
## Known stack suffix:
## declBegin list(declBegin)
## LR(1) items:
list(declBegin) -> declBegin list(declBegin) . [ LBRACK ]
## Transitions:
## Reductions:
-- On LBRACK
--   reduce production list(declBegin) -> declBegin list(declBegin)

State 162:
## Known stack suffix:
## classe
## LR(1) items:
declBegin -> classe . [ LBRACK CLASS ]
## Transitions:
## Reductions:
-- On LBRACK CLASS
--   reduce production declBegin -> classe

